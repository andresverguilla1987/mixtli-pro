name: Mixtli CI + Auto Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    env:
      POSTMAN_COLLECTION: cartero/mixtli-api-prod.postman_collection.json
      POSTMAN_ENV: cartero/mixtli-prod.postman_environment.json
      BASE_URL: https://mixtli-pro.onrender.com

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Instalar Newman (Postman CLI)
        run: npm i -g newman

      - name: Smoke tests (GET /salud, CRUD usuarios)
        run: |
          jq --arg url "$BASE_URL" '.values |= map(if .key=="BASE_URL" then .value=$url | .enabled=true else . end)'             "$POSTMAN_ENV" > /tmp/env.json
          newman run "$POSTMAN_COLLECTION" -e /tmp/env.json --color on --timeout-request 15000

      - name: Crear deploy en Render
        if: ${{ success() }}
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          echo "Disparando deploy en Render para servicio $RENDER_SERVICE_ID…"
          DEPLOY=$(curl -sS -X POST "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys"             -H "Authorization: Bearer ${RENDER_API_KEY}"             -H "Content-Type: application/json"             -d '{}')
          echo "$DEPLOY"
          ID=$(echo "$DEPLOY" | jq -r '.id')
          if [ "$ID" = "null" ] || [ -z "$ID" ]; then
            echo "No se pudo crear el deploy en Render"
            exit 1
          fi
          echo "Deploy ID: $ID"

          echo "Esperando a que Render complete el deploy…"
          for i in {1..60}; do
            STATUS=$(curl -sS "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys/${ID}"               -H "Authorization: Bearer ${RENDER_API_KEY}" | jq -r '.status')
            echo "Estado: $STATUS"
            if [ "$STATUS" = "live" ] || [ "$STATUS" = "succeeded" ]; then
              echo "✅ Deploy listo"
              exit 0
            fi
            if [ "$STATUS" = "failed" ] || [ "$STATUS" = "canceled" ]; then
              echo "❌ Deploy falló ($STATUS)"
              exit 1
            fi
            sleep 10
          done
          echo "⏱️ Timeout esperando el deploy"
          exit 1
