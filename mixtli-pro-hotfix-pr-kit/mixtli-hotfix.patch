--- a/server.js
+++ b/server.js
@@ -0,0 +1,34 @@
+require('dotenv').config();
+const express = require('express');
+const morgan = require('morgan');
+const cors = require('cors');
+const helmet = require('helmet');
+const errorHandler = require('./src/middlewares/error');
+
+const app = express();
+app.use(helmet());
+app.use(cors());
+app.use(express.json());
+app.use(morgan('dev'));
+
+// Bienvenida para evitar 404 en '/'
+app.get('/', (req, res) => {
+  res.send({
+    name: 'Mixtli API (hotfix)',
+    status: 'ok',
+    docs: ['/salud','/api/users','/api/uploads/*'],
+    time: new Date().toISOString(),
+  });
+});
+
+app.get('/salud', (req, res) => res.json({ ok: true, time: new Date().toISOString() }));
+
+// Rutas
+app.use('/api/users', require('./src/rutas/users'));
+app.use('/api/uploads', require('./src/rutas/uploads'));
+
+// Error handler
+app.use(errorHandler);
+
+const PORT = process.env.PORT || 10000;
+app.listen(PORT, () => console.log(`🚀 API en puerto ${PORT}`));
--- a/prisma/schema.prisma
+++ b/prisma/schema.prisma
@@ -0,0 +1,16 @@
+generator client {
+  provider = "prisma-client-js"
+}
+
+datasource db {
+  provider = "postgresql"
+  url      = env("DATABASE_URL")
+}
+
+model Usuario {
+  id           Int       @id @default(autoincrement())
+  email        String    @unique
+  passwordHash String?
+  createdAt    DateTime  @default(now())
+  updatedAt    DateTime  @updatedAt
+}
--- a/src/rutas/users.js
+++ b/src/rutas/users.js
@@ -0,0 +1,90 @@
+const express = require('express');
+const router = express.Router();
+const prisma = require('../lib/prisma');
+const Joi = require('joi');
+const bcrypt = require('bcryptjs');
+
+const userCreateSchema = Joi.object({
+  email: Joi.string().email().required(),
+  password: Joi.string().min(6).required()
+});
+
+const userUpdateSchema = Joi.object({
+  email: Joi.string().email().optional(),
+  password: Joi.string().min(6).optional()
+}).min(1);
+
+router.get('/', async (req, res, next) => {
+  try {
+    const usuarios = await prisma.usuario.findMany({
+      orderBy: { id: 'asc' },
+      select: { id: true, email: true, createdAt: true, updatedAt: true },
+    });
+    const data = usuarios.map(u => ({
+      id: u.id,
+      correo: u.email,
+      createdAt: u.createdAt,
+      updatedAt: u.updatedAt,
+    }));
+    res.json(data);
+  } catch (err) { next(err); }
+});
+
+router.get('/:id', async (req, res, next) => {
+  try {
+    const id = Number(req.params.id);
+    if (Number.isNaN(id)) return res.status(400).json({ error: 'id inválido' });
+    const u = await prisma.usuario.findUnique({
+      where: { id },
+      select: { id: true, email: true, createdAt: true, updatedAt: true },
+    });
+    if (!u) return res.status(404).json({ error: 'no encontrado' });
+    res.json({ id: u.id, correo: u.email, createdAt: u.createdAt, updatedAt: u.updatedAt });
+  } catch (err) { next(err); }
+});
+
+router.post('/', async (req, res, next) => {
+  try {
+    const { error, value } = userCreateSchema.validate(req.body);
+    if (error) return res.status(400).json({ error: error.message });
+    const { email, password } = value;
+    const hash = await bcrypt.hash(password, 10);
+    const nuevo = await prisma.usuario.create({
+      data: { email, passwordHash: hash },
+      select: { id: true, email: true, createdAt: true, updatedAt: true },
+    });
+    res.status(201).json({ id: nuevo.id, correo: nuevo.email, createdAt: nuevo.createdAt, updatedAt: nuevo.updatedAt });
+  } catch (err) {
+    if (err.code === 'P2002') return res.status(409).json({ error: 'email ya existe' });
+    next(err);
+  }
+});
+
+router.put('/:id', async (req, res, next) => {
+  try {
+    const id = Number(req.params.id);
+    if (Number.isNaN(id)) return res.status(400).json({ error: 'id inválido' });
+    const { error, value } = userUpdateSchema.validate(req.body);
+    if (error) return res.status(400).json({ error: error.message });
+    const data = {};
+    if (value.email) data.email = value.email;
+    if (value.password) data.passwordHash = await bcrypt.hash(value.password, 10);
+    const updated = await prisma.usuario.update({
+      where: { id },
+      data,
+      select: { id: true, email: true, createdAt: true, updatedAt: true },
+    });
+    res.json({ id: updated.id, correo: updated.email, createdAt: updated.createdAt, updatedAt: updated.updatedAt });
+  } catch (err) { next(err); }
+});
+
+router.delete('/:id', async (req, res, next) => {
+  try {
+    const id = Number(req.params.id);
+    if (Number.isNaN(id)) return res.status(400).json({ error: 'id inválido' });
+    await prisma.usuario.delete({ where: { id } });
+    res.status(204).end();
+  } catch (err) { next(err); }
+});
+
+module.exports = router;
--- a/src/rutas/uploads.js
+++ b/src/rutas/uploads.js
@@ -0,0 +1,28 @@
+const express = require('express');
+const router = express.Router();
+
+const requiredEnv = ['S3_BUCKET', 'S3_ACCESS_KEY', 'S3_SECRET_KEY'];
+const hasS3 = requiredEnv.every(k => process.env[k]);
+
+// Endpoints visibles (no 404). Si no hay S3 configurado, avisa 501.
+router.post('/multipart/init', (req, res) => {
+  if (!hasS3) return res.status(501).json({ error: 'S3 no configurado. Define S3_BUCKET,S3_ACCESS_KEY,S3_SECRET_KEY' });
+  return res.status(501).json({ error: 'Implementación S3 no habilitada en hotfix. Usa el repo multiservicio.' });
+});
+
+router.get('/multipart/sign-part', (req, res) => {
+  if (!hasS3) return res.status(501).json({ error: 'S3 no configurado. Define S3_BUCKET,S3_ACCESS_KEY,S3_SECRET_KEY' });
+  return res.status(501).json({ error: 'Implementación S3 no habilitada en hotfix. Usa el repo multiservicio.' });
+});
+
+router.post('/multipart/complete', (req, res) => {
+  if (!hasS3) return res.status(501).json({ error: 'S3 no configurado. Define S3_BUCKET,S3_ACCESS_KEY,S3_SECRET_KEY' });
+  return res.status(501).json({ error: 'Implementación S3 no habilitada en hotfix. Usa el repo multiservicio.' });
+});
+
+router.post('/multipart/abort', (req, res) => {
+  if (!hasS3) return res.status(501).json({ error: 'S3 no configurado. Define S3_BUCKET,S3_ACCESS_KEY,S3_SECRET_KEY' });
+  return res.status(501).json({ error: 'Implementación S3 no habilitada en hotfix. Usa el repo multiservicio.' });
+});
+
+module.exports = router;
