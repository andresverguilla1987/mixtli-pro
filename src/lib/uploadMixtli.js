import { API_BASE } from './api'
export async function presign(file){ const r=await fetch(`${API_BASE}/api/presign`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({filename:file.name,type:file.type,size:file.size})}); if(!r.ok) throw new Error(`presign ${r.status}: ${await r.text()}`); return r.json(); }
export function putToR2(url,file,onProgress){ return new Promise((resolve,reject)=>{ const xhr=new XMLHttpRequest(); xhr.open('PUT',url,true); xhr.setRequestHeader('Content-Type',file.type||'application/octet-stream'); xhr.upload.onprogress=(e)=>{ if(e.lengthComputable && typeof onProgress==='function'){ onProgress(Math.round((e.loaded/e.total)*100)); } }; xhr.onload=()=> (xhr.status>=200&&xhr.status<300)?resolve():reject(new Error(`R2 PUT ${xhr.status}: ${xhr.responseText}`)); xhr.onerror=()=>reject(new Error('R2 PUT network error')); xhr.send(file); }); }
export async function complete(key){ const r=await fetch(`${API_BASE}/api/complete`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({key})}); if(!r.ok) throw new Error(`complete ${r.status}: ${await r.text()}`); return r.json(); }
export async function uploadMixtli(file,onProgress){ const { url, key, publicUrl } = await presign(file); await putToR2(url,file,onProgress); const meta=await complete(key); return { key, publicUrl, meta }; }
