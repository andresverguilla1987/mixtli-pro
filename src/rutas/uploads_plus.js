
const express=require('express');
const {S3Client,CreateMultipartUploadCommand,UploadPartCommand,CompleteMultipartUploadCommand,AbortMultipartUploadCommand,ListObjectsV2Command,GetObjectCommand}=require('@aws-sdk/client-s3');
const {getSignedUrl}=require('@aws-sdk/s3-request-presigner');
const router=express.Router();
function s3Client(){const region=process.env.AWS_REGION||'us-east-1';const endpoint=process.env.S3_ENDPOINT||undefined;const forcePathStyle=String(process.env.S3_FORCE_PATH_STYLE).toLowerCase()==='true';return new S3Client({region,endpoint,forcePathStyle});}
function bucket(){const b=process.env.S3_BUCKET; if(!b) throw new Error('S3_BUCKET no definido'); return b;}
function publicUrl(key){const b=bucket();const region=process.env.AWS_REGION||'us-east-1';const endpoint=process.env.S3_ENDPOINT;const forcePathStyle=String(process.env.S3_FORCE_PATH_STYLE).toLowerCase()==='true'; if(endpoint){return null;} if(forcePathStyle){return `https://s3.${region}.amazonaws.com/${b}/${encodeURIComponent(key)}`;} return `https://${b}.s3.${region}.amazonaws.com/${encodeURIComponent(key)}`;}
router.post('/multipart/init',async (req,res)=>{try{const {filename,contentType}=req.body||{};if(!filename) return res.status(400).json({error:'filename requerido'});const safe=filename.replace(/[^\w.\-]/g,'_');const key=`uploads/${Date.now()}-${safe}`;const out=await s3Client().send(new CreateMultipartUploadCommand({Bucket:bucket(),Key:key,ContentType:contentType||'application/octet-stream',ACL:process.env.S3_ACL||undefined}));res.json({uploadId:out.UploadId,key});}catch(e){console.error('init error',e);res.status(500).json({error:String(e.message||e)})}});
router.get('/multipart/sign-part',async (req,res)=>{try{const {key,uploadId,partNumber}=req.query;if(!key||!uploadId||!partNumber) return res.status(400).json({error:'key, uploadId y partNumber son requeridos'});const cmd=new UploadPartCommand({Bucket:bucket(),Key:key,UploadId:uploadId,PartNumber:Number(partNumber)});const url=await getSignedUrl(s3Client(),cmd,{expiresIn:600});res.json({url});}catch(e){console.error('sign-part error',e);res.status(500).json({error:String(e.message||e)})}});
router.post('/multipart/complete',async (req,res)=>{try{const {key,uploadId,parts}=req.body||{};if(!key||!uploadId||!Array.isArray(parts)) return res.status(400).json({error:'key, uploadId y parts[] son requeridos'});const out=await s3Client().send(new CompleteMultipartUploadCommand({Bucket:bucket(),Key:key,UploadId:uploadId,MultipartUpload:{Parts:parts.map(p=>({ETag:p.ETag,PartNumber:Number(p.PartNumber)}))}}));const urlPub=publicUrl(key);let urlSigned=null;if(!urlPub){urlSigned=await getSignedUrl(s3Client(),new GetObjectCommand({Bucket:bucket(),Key:key}),{expiresIn:3600});}res.json({ok:true,location:out.Location||urlPub||urlSigned,key,urlPublic:urlPub,urlSigned});}catch(e){console.error('complete error',e);res.status(500).json({error:String(e.message||e)})}});
router.post('/multipart/abort',async (req,res)=>{try{const {key,uploadId}=req.body||{};if(!key||!uploadId) return res.status(400).json({error:'key y uploadId son requeridos'});await s3Client().send(new AbortMultipartUploadCommand({Bucket:bucket(),Key:key,UploadId:uploadId}));res.json({ok:true});}catch(e){console.error('abort error',e);res.status(500).json({error:String(e.message||e)})}});
router.get('/list',async (req,res)=>{try{const prefix=req.query.prefix||'uploads/';const out=await s3Client().send(new ListObjectsV2Command({Bucket:bucket(),Prefix:prefix,MaxKeys:1000}));const items=(out.Contents||[]).map(o=>({key:o.Key,size:o.Size,lastModified:o.LastModified,urlPublic:publicUrl(o.Key)}));res.json({items});}catch(e){console.error('list error',e);res.status(500).json({error:String(e.message||e)})}});
router.get('/sign-get',async (req,res)=>{try{const {key,expiresIn}=req.query;if(!key) return res.status(400).json({error:'key requerido'});const url=await getSignedUrl(s3Client(),new GetObjectCommand({Bucket:bucket(),Key:key}),{expiresIn:Number(expiresIn)||3600});res.json({url});}catch(e){console.error('sign-get error',e);res.status(500).json({error:String(e.message||e)})}});
module.exports=router;
