
name: Mixtli CI + CD (cartero)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Run Postman tests (Newman)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Newman (Postman CLI)
        run: npm i -g newman newman-reporter-htmlextra

      - name: Run collection (from cartero/)
        run: |
          mkdir -p reports
          newman run "cartero/mixtli-api-prod.postman_collection.json"             -e "cartero/mixtli-prod.postman_environment.json"             --reporters cli,htmlextra,junit             --reporter-htmlextra-export reports/mixtli-report.html             --reporter-junit-export reports/mixtli-report.junit.xml             --timeout-request 60000             --delay-request 100

      - name: Upload HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-html
          path: reports/mixtli-report.html

      - name: Upload JUnit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-junit
          path: reports/mixtli-report.junit.xml

  deploy:
    name: Deploy to Render (after green tests)
    needs: test
    if: ${{ needs.test.result == 'success' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Trigger Render deploy
        id: trigger
        env:
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          if [ -z "$RENDER_SERVICE_ID" ] || [ -z "$RENDER_API_KEY" ]; then
            echo "Missing RENDER_SERVICE_ID or RENDER_API_KEY"; exit 1
          fi
          RESP=$(curl -s -X POST             -H "Authorization: Bearer ${RENDER_API_KEY}"             -H "Content-Type: application/json"             https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys             -d '{"clearCache": true}')
          echo "$RESP"
          ID=$(echo "$RESP" | jq -r '.id // empty')
          if [ -z "$ID" ]; then
            echo "Could not trigger deploy"; exit 1
          fi
          echo "deploy_id=$ID" >> $GITHUB_OUTPUT

      - name: Wait for Render deploy to finish
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          DEPLOY_ID: ${{ steps.trigger.outputs.deploy_id }}
        run: |
          echo "Polling Render deploy: $DEPLOY_ID"
          MAX=90
          i=0
          while [ $i -lt $MAX ]; do
            STATUS=$(curl -s -H "Authorization: Bearer ${RENDER_API_KEY}"               https://api.render.com/v1/deploys/${DEPLOY_ID} | jq -r '.status // empty')
            echo "Status: $STATUS"
            if [ "$STATUS" = "live" ]; then
              echo "Deploy live âœ…"
              exit 0
            elif [ "$STATUS" = "build_failed" ] || [ "$STATUS" = "update_failed" ] || [ "$STATUS" = "deactivated" ]; then
              echo "Deploy failed with status: $STATUS"; exit 1
            fi
            sleep 10
            i=$((i+1))
          done
          echo "Timeout waiting for deploy"; exit 1
