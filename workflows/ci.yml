name: Mixtli – CI (Postman/Newman) + Deploy + Healthcheck + Slack

on:
  push:
    branches: [ main, principal ]
  workflow_dispatch:

env:
  BASE_URL: https://mixtli-pro.onrender.com
  COLLECTION_PATH: cartero/mixtli-api-prod.postman_collection.json
  ENV_PATH: cartero/mixtli-prod.postman_environment.json

jobs:
  test:
    name: Run Postman tests (Newman)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: |
          npm i -g newman@6 newman-reporter-htmlextra@1

      - name: Run Newman
        id: newman
        run: |
          bash guiones/run-tests.sh "${{ env.COLLECTION_PATH }}" "${{ env.ENV_PATH }}"

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: ${{ success() }}

    steps:
      - name: Trigger Render deploy
        id: trigger
        run: |
          set -e
          DEPLOY=$(curl -s -X POST             -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"             -H "Content-Type: application/json"             "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
          echo "Deploy triggered: $DEPLOY"

      - name: Wait for Render deploy to be live (poll)
        run: |
          set -e
          ATTEMPTS=20
          SLEEP=15
          for i in $(seq 1 $ATTEMPTS); do
            if curl -fsS "${{ env.BASE_URL }}/salud" >/dev/null 2>&1; then
              echo "Service answering /salud ✅"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "Service not healthy after wait ❌"
          exit 1

  healthcheck:
    name: Post-deploy Healthcheck
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check /salud
        id: ping
        run: |
          set -e
          start=$(date +%s)
          HTTP_CODE=$(curl -s -o /tmp/resp.json -w "%{http_code}" "${{ env.BASE_URL }}/salud")
          end=$(date +%s)
          echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "duration=$((end-start))" >> $GITHUB_OUTPUT
          cat /tmp/resp.json || true
          test "$HTTP_CODE" = "200"

      - name: Notify Slack on success
        if: ${{ success() }}
        run: |
          DURATION="${{ steps.ping.outputs.duration }}"
          MSG="✅ *Mixtli* deploy OK y *healthcheck* ✅
• Repo: $GITHUB_REPOSITORY
• Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
• Endpoint: ${{ env.BASE_URL }}/salud
• Healthcheck: ${DURATION}s"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -s -X POST -H 'Content-type: application/json'             --data "$payload" "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Notify Slack on failure
        if: ${{ failure() }}
        run: |
          MSG="❌ *Mixtli* post-deploy *healthcheck* FALLÓ
• Repo: $GITHUB_REPOSITORY
• Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
• Endpoint: ${{ env.BASE_URL }}/salud"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -s -X POST -H 'Content-type: application/json'             --data "$payload" "${{ secrets.SLACK_WEBHOOK_URL }}"
