name: Mixtli – CI (Postman/Newman) + Deploy + Healthcheck + Slack + Metrics

on:
  push:
    branches: [ main, principal ]
  workflow_dispatch:

env:
  BASE_URL: https://mixtli-pro.onrender.com
  COLLECTION_PATH: cartero/mixtli-api-prod.postman_collection.json
  ENV_PATH: cartero/mixtli-prod.postman_environment.json
  REPORT_DIR: reports

jobs:
  test:
    name: Run Postman tests (Newman)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: |
          npm i -g newman@6 newman-reporter-htmlextra@1

      - name: Run Newman (save HTML + JSON)
        run: |
          bash guiones/run-tests.sh "${{ env.COLLECTION_PATH }}" "${{ env.ENV_PATH }}" "${{ env.REPORT_DIR }}"

      - name: Upload reports artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-reports
          path: ${{ env.REPORT_DIR }}/

  deploy:
    name: Deploy to Render
    needs: test
    runs-on: ubuntu-latest
    if: ${{ needs.test.result == 'success' }}

    steps:
      - name: Trigger Render deploy
        id: trigger
        run: |
          set -e
          DEPLOY=$(curl -s -X POST             -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"             -H "Content-Type: application/json"             "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys")
          echo "Deploy triggered: $DEPLOY"

      - name: Wait for Render deploy to be live (poll with /salud ping)
        run: |
          set -e
          ATTEMPTS=20
          SLEEP=15
          for i in $(seq 1 $ATTEMPTS); do
            if curl -fsS "${{ env.BASE_URL }}/salud" >/dev/null 2>&1; then
              echo "Service answering /salud ✅"
              exit 0
            fi
            sleep $SLEEP
          done
          echo "Service not healthy after wait ❌"
          exit 1

  healthcheck:
    name: Post-deploy Healthcheck + Slack
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Download reports artifact
        uses: actions/download-artifact@v4
        with:
          name: newman-reports
          path: reports

      - name: Parse Newman metrics
        id: metrics
        run: |
          set -e
          JSON="reports/newman-report.json"
          if [ ! -f "$JSON" ]; then
            echo "no_json=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          TOTAL=$(jq '.run.stats.tests.total' "$JSON")
          FAILED=$(jq '.run.stats.tests.failed' "$JSON")
          PASSED=$((TOTAL-FAILED))
          DUR=$(jq '.run.timings.completed - .run.timings.started' "$JSON")
          echo "total=$TOTAL"   >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "passed=$PASSED" >> $GITHUB_OUTPUT
          echo "duration_ms=$DUR" >> $GITHUB_OUTPUT
          echo "no_json=false" >> $GITHUB_OUTPUT

      - name: Check /salud
        id: ping
        run: |
          set -e
          start=$(date +%s)
          HTTP_CODE=$(curl -s -o /tmp/resp.json -w "%{http_code}" "${{ env.BASE_URL }}/salud")
          end=$(date +%s)
          echo "http_code=$HTTP_CODE" >> $GITHUB_OUTPUT
          echo "duration=$((end-start))" >> $GITHUB_OUTPUT
          cat /tmp/resp.json || true
          test "$HTTP_CODE" = "200"

      - name: Notify Slack on success
        if: ${{ success() }}
        run: |
          if [ "${{ steps.metrics.outputs.no_json }}" = "true" ]; then
            METRICS="(sin JSON de newman)"
          else
            METRICS="Tests: ${{ steps.metrics.outputs.passed }}/${{ steps.metrics.outputs.total }} (fallaron ${{ steps.metrics.outputs.failed }}), Duración: $(( ${{ steps.metrics.outputs.duration_ms }} / 1000 ))s"
          fi
          MSG="✅ *Mixtli* deploy OK + *healthcheck* ✅
• Repo: $GITHUB_REPOSITORY
• Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
• Endpoint: ${{ env.BASE_URL }}/salud (HTTP 200 en ${ { steps.ping.outputs.duration } }s)
• ${METRICS}"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -s -X POST -H 'Content-type: application/json'             --data "$payload" "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Notify Slack on failure
        if: ${{ failure() }}
        run: |
          if [ "${{ steps.metrics.outputs.no_json }}" = "true" ]; then
            METRICS="(sin JSON de newman)"
          else
            METRICS="Tests: ${{ steps.metrics.outputs.passed }}/${{ steps.metrics.outputs.total }} (fallaron ${{ steps.metrics.outputs.failed }}), Duración: $(( ${{ steps.metrics.outputs.duration_ms }} / 1000 ))s"
          fi
          MSG="❌ *Mixtli* post-deploy *healthcheck* FALLÓ
• Repo: $GITHUB_REPOSITORY
• Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
• Endpoint: ${{ env.BASE_URL }}/salud
• ${METRICS}"
          payload=$(jq -n --arg text "$MSG" '{text: $text}')
          curl -s -X POST -H 'Content-type: application/json'             --data "$payload" "${{ secrets.SLACK_WEBHOOK_URL }}"
