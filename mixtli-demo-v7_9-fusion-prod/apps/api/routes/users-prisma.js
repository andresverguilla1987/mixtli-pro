const { Router } = require('express'); const client = require('prom-client'); const { PrismaClient } = require('@prisma/client'); const prisma = globalThis.__PRISMA__ || new PrismaClient(); if (!globalThis.__PRISMA__) globalThis.__PRISMA__ = prisma; const signupsCounter = new client.Counter({ name: 'user_signups_total', help: 'NÃºmero de registros de usuario', labelNames: ['plan'] }); const activeUsersGauge = new client.Gauge({ name: 'active_users_gauge', help: 'Usuarios activos por ventana', labelNames: ['window'] }); function dateAtStart(d){const x=new Date(d);x.setHours(0,0,0,0);return x;} module.exports=function usersPrisma({basePath=''}={}){ const router=Router(); router.post(`${basePath}/auth/register`, async (req,res)=>{ try{ const {name,email,password,plan}=req.body||{}; if(!email) return res.status(400).json({ok:false,error:'email required'}); const exists=await prisma.user.findUnique({where:{email}}); if(exists) return res.status(409).json({ok:false,error:'email exists'}); const user=await prisma.user.create({data:{email,name:name||email.split('@')[0],plan:plan||'free'}}); signupsCounter.inc({plan:user.plan||'free'},1); await prisma.auditEvent.create({data:{type:'user.register',userId:user.id,meta:{email:user.email,plan:user.plan}}}); return res.json({ok:true,user}); }catch(e){console.error(e); return res.status(500).json({ok:false,error:'server_error'});} }); router.get(`${basePath}/users/stats`, async (_req,res)=>{ try{ const totalUsers=await prisma.user.count(); const now=new Date(); const dayStart=dateAtStart(now); const weekStart=new Date(dayStart); weekStart.setDate(weekStart.getDate()-7); const monthStart=new Date(dayStart); monthStart.setDate(monthStart.getDate()-30); const [dailyActive,weeklyActive,monthlyActive]=await Promise.all([ prisma.user.count({where:{lastActive:{gte:dayStart}}}), prisma.user.count({where:{lastActive:{gte:weekStart}}}), prisma.user.count({where:{lastActive:{gte:monthStart}}}), ]); activeUsersGauge.set({window:'daily'},dailyActive); activeUsersGauge.set({window:'weekly'},weeklyActive); activeUsersGauge.set({window:'monthly'},monthlyActive); const signupsByDay=[]; for(let i=29;i>=0;i--){const d0=new Date(dayStart); d0.setDate(d0.getDate()-i); const d1=new Date(d0); d1.setDate(d1.getDate()+1); const c=await prisma.user.count({where:{createdAt:{gte:d0,lt:d1}}}); signupsByDay.push({date:d0.toISOString().slice(0,10),count:c}); } return res.json({totalUsers,dailyActive,weeklyActive,monthlyActive,signupsByDay}); }catch(e){console.error(e); return res.status(500).json({ok:false,error:'server_error'});} }); router.get(`${basePath}/users/recent`, async (_req,res)=>{ try{ const recent=await prisma.user.findMany({orderBy:{createdAt:'desc'},take:50,select:{id:true,email:true,name:true,plan:true,createdAt:true}}); return res.json(recent.map(u=>({id:u.id,email:u.email,name:u.name,plan:u.plan,signupAt:u.createdAt}))); }catch(e){console.error(e); return res.status(500).json({ok:false,error:'server_error'});} }); return router; };