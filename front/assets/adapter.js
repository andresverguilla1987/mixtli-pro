import {CFG} from './config.js';
const S={tokenKey:'mixtli.token',get token(){return localStorage.getItem(this.tokenKey)||'';},set token(v){localStorage.setItem(this.tokenKey,v||'');},
base:p=>`${CFG.API_BASE.replace(/\/$/,'')}${p}`,authHeaders:(e={})=>Object.assign({'Content-Type':'application/json','Authorization':'Bearer '+S.token},e)};
export const health=async()=> (await fetch(S.base('/api/health'))).json();
export const register=async(e,p)=>{const r=await fetch(S.base('/auth/register'),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:e,password:p})});const j=await r.json();if(!r.ok)throw new Error(j.error||'register failed');return j;};
export const login=async(e,p)=>{const r=await fetch(S.base('/auth/login'),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:e,password:p})});const j=await r.json();if(!r.ok)throw new Error(j.error||'login failed');S.token=j.token;return j;};
export const presign=async(f,t=14)=>{const r=await fetch(S.base('/upload/presign'),{method:'POST',headers:S.authHeaders(),body:JSON.stringify({filename:f.name,size:f.size,mime:f.type||'application/octet-stream',ttlDays:t})});const j=await r.json();if(!r.ok)throw new Error(j.error||'presign failed');return j;};
export const putToBucket=(u,f,onp)=>new Promise((res,rej)=>{const x=new XMLHttpRequest();x.open('PUT',u,true);x.setRequestHeader('Content-Type',f.type||'application/octet-stream');x.upload.onprogress=e=>{if(onp&&e.lengthComputable)onp(e.loaded,e.total)};x.onload=()=>{if(x.status>=200&&x.status<300){res({etag:x.getResponseHeader('ETag')||x.getResponseHeader('etag')});}else rej(new Error('PUT failed '+x.status));};x.onerror=()=>rej(new Error('PUT network error'));x.send(f);});
export const complete=async(id,etag)=>{const r=await fetch(S.base('/upload/complete'),{method:'POST',headers:S.authHeaders(),body:JSON.stringify({uploadId:id,etag})});const j=await r.json();if(!r.ok)throw new Error(j.error||'complete failed');return j;};
export const getLink=async(id)=>{const r=await fetch(S.base(`/upload/${id}/link`),{headers:S.authHeaders()});const j=await r.json();if(!r.ok)throw new Error(j.error||'link failed');return j;};
export const sendEmail=async(id,to,msg)=>{const r=await fetch(S.base('/email/send'),{method:'POST',headers:S.authHeaders(),body:JSON.stringify({uploadId:id,to,message:msg})});const j=await r.json();if(!r.ok)throw new Error(j.error||'email failed');return j;};
export const Token=S;