import { CFG } from './config.js';
const S={tokenKey:'mixtli.token',get token(){return localStorage.getItem(this.tokenKey)||'';},set token(v){localStorage.setItem(this.tokenKey,v||'');},base(p){return `${CFG.API_BASE.replace(/\/$/,'')}${p}`;},authHeaders(extra={}){return Object.assign({'Content-Type':'application/json','Authorization':'Bearer '+this.token},extra);}};
export async function health(){const r=await fetch(S.base('/api/health'));return r.json();}
export async function register(e,p){const r=await fetch(S.base('/auth/register'),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:e,password:p})});const j=await r.json();if(!r.ok)throw new Error(j.error||'register failed');return j;}
export async function login(e,p){const r=await fetch(S.base('/auth/login'),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email:e,password:p})});const j=await r.json();if(!r.ok)throw new Error(j.error||'login failed');S.token=j.token;return j;}
export async function presign(f,t=14){const r=await fetch(S.base('/upload/presign'),{method:'POST',headers:S.authHeaders(),body:JSON.stringify({filename:f.name,size:f.size,mime:f.type||'application/octet-stream',ttlDays:t})});const j=await r.json();if(!r.ok)throw new Error(j.error||'presign failed');return j;}
export async function putToBucket(u,f,onp){return new Promise((res,rej)=>{const x=new XMLHttpRequest();x.open('PUT',u,true);x.setRequestHeader('Content-Type',f.type||'application/octet-stream');x.upload.onprogress=ev=>{if(onp&&ev.lengthComputable)onp(ev.loaded,ev.total)};x.onload=()=>{if(x.status>=200&&x.status<300){const e=x.getResponseHeader('ETag')||x.getResponseHeader('etag');res({etag:e});}else rej(new Error('PUT failed '+x.status));};x.onerror=()=>rej(new Error('PUT network error'));x.send(f);});}
export async function complete(id,etag){const r=await fetch(S.base('/upload/complete'),{method:'POST',headers:S.authHeaders(),body:JSON.stringify({uploadId:id,etag})});const j=await r.json();if(!r.ok)throw new Error(j.error||'complete failed');return j;}
export async function getLink(id){const r=await fetch(S.base(`/upload/${id}/link`),{headers:S.authHeaders()});const j=await r.json();if(!r.ok)throw new Error(j.error||'link failed');return j;}
export async function sendEmail(id,to,msg){const r=await fetch(S.base('/email/send'),{method:'POST',headers:S.authHeaders(),body:JSON.stringify({uploadId:id,to,message:msg})});const j=await r.json();if(!r.ok)throw new Error(j.error||'email failed');return j;}
export const Token=S;